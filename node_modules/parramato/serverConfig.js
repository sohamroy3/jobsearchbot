const domain = "parramato.com";
module.exports = {
  auth: {
    cookieSecret: "cookie_secret",
    name: "parramato",
    domain: "*." + domain
  },
  domain: domain,
  dbUri:
    "mongodb+srv://sharedPara:oHNDauQ5meUU22O1@sharedparramato-sy1qy.mongodb.net/shared-parramato?retryWrites=true&w=majority",
  redisIp: "redis1",
  redisPassword:
    "sadGJSAFDJASDjVRA^#$&^@#GS682%$732q76^#$#*^ORGVEBo8tcr68t#Vw5tc86we_8465asysytdasfdTDGyHn%g&h84GJ",
  redisPort: 6379,
  socketPath: "/socket",
  httpPort: process.argv[2] || 3000,
  redirectMainDNS: "https://" + domain + "/auth-view",
  s3: {
    bucketName: "parramato",
    iamUserKey: "AKIAI3PBGMUPKCVW6XVA",
    iamUserSecret: "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"
  },
  namespace:
    "sjdbfsdg87fgebidhfkjsdakdXX01123enkjHBHSADBIJEFKJNdkajncduf923fh9qwhcuweviaahfa",
  passphraseTransit:
    "dsajghdksa7fg8ow7eg32o874gf873gf8v7w8cyv387egf8ygsygyugjhgfdkuyuyuktfkuygwuyyugsdYGUYGgyjgblgUGIYGIGYE",
  passphraseMiddleware:
    "YGUYGgyjgblgUGIYGIGkwhbiuashbo98u9283hr9h24rqIYGI932kbidbiadsYE",
  integrityPassPhrase:
    "hbu8b23478gbuy2bcfy2cbcihsdcgUGUYUuy2bcfy2cbcihsdcYBEBIW",
  localSavePassPhrase:
    "8rhfuahiuHFIJUHAFIWEHFOw98ehfu9HFjhE234jbhJHbjhbfjebkfewfewjhEUHFUI",
  startIndicator: "//------start------",
  endIndicator: "//------end------",
  objects: {
    nluUpdateUrl: "https://" + domain + "/process/nlu/update",

    defaultDomain: "https://" + domain,
    middlewareRoot: "https://" + domain + "/middleware",
    checkUrl: "https://" + domain + "/check",

    defaultPushSubscribeUrl:
      "https://" + domain + "/middleware/subscribeForPush",

    chatDefaultUrl: "wss://" + domain,
    chatDefaultPath: "/socket",

    voiceUrl: "wss://" + domain,
    voicePath: "/voice/socket",

    uploadUrl: "wss://" + domain,
    uploadPath: "/upload/socket",

    chatUrl: "wss://" + domain,
    chatPath: "/middleware/socket",

    humanUrl: "wss://" + domain,
    humanPath: "/human/socket",

    messageHead: "Ask me anything.",
    closedMessage: ""
  },
  firebaseConfig: {
    apiKey: "AIzaSyCvFiDG52CKSQ8TeQWn_fCditn_d1au0DU",
    authDomain: "parramato-push.firebaseapp.com",
    databaseURL: "https://parramato-push.firebaseio.com",
    projectId: "parramato-push",
    storageBucket: "",
    messagingSenderId: "167833243240"
  },
  dashboardUrl: "http://localhost:7000",
  staticReadUrl: "https://s3.ap-south-1.amazonaws.com/parramato",
  devUrl: "https://" + domain + "/bot-view",
  prodUrl: "https://" + domain + "/bot-view",
  staticUrl: "https://" + domain + "/bot-view",
  prodPath: "prod",
  devPath: "dev",
  loaderPreRequisite: `
                    function load(x, s) {
                        return new Promise(function (resolve, reject) {
                       //console.log("file-loading");
                    
                        s.onload = s.onreadystatechange = function () {
                            var r = false;
                    
                            if (!r && (!this.readyState || this.readyState == 'complete')) {
                            r = true;
                           //console.log("file-loading success");
                            return resolve();
                            }
                        };
                    
                        s.onerror = function (e) {
                           //console.log("file-loading failed");
                            return reject(e);
                        };
                        //console.log(s)
                        x.appendChild(s);
                        });
                    }

                async function loadJs(jsUrls) {
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    var x = document.getElementsByTagName('head')[0];
                    try {
                        for (var _iterator = Object.keys(jsUrls)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var key = _step.value;

                            var _url = jsUrls[key];
                            if (!isMyScriptLoaded(_url)) {
                                //document.writeln("<script type='text/javascript' src='" + _url + "'></script>");
                                var s = document.createElement('script');
                                s.type = 'text/javascript';
                                s.src = _url;
                                s.async = true;
                                s.defer = true;
                                await load(x, s);
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                function isMyScriptLoaded(url) {
                    var scripts = document.getElementsByTagName('script');
                    for (var i = scripts.length; i--;) {
                        if (scripts[i].src == url) return true;
                    }
                    return false;
                }

                function isMyCssLoaded(url) {
                    var scripts = document.getElementsByTagName('link');
                    for (var i = scripts.length; i--;) {
                        if (scripts[i].src == url) return true;
                    }
                    return false;
                }
                async function loadCss(cssUrls) {
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = Object.keys(cssUrls)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var key = _step2.value;

                            var _url2 = cssUrls[key];
                            if (!isMyCssLoaded(_url2)) {
                                var head = document.getElementsByTagName('head')[0];
                                var link = document.createElement('link');
                                link.rel = 'stylesheet';
                                link.type = 'text/css';
                                link.href = _url2;
                                link.media = 'all';
                                link.async = true;
                                link.defer = true;
                                //head.appendChild(link);
                                await load(head, link);
                            }
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }
                }`
};
